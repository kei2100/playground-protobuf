package module

import (
	"fmt"

	"github.com/golang/protobuf/protoc-gen-go/descriptor"
)

type protoFile struct {
	Path      string
	GoPackage string
	Messages  []*protoMessage
}

type protoMessage struct {
	Name   string
	Fields []*protoField
}

type protoField struct {
	// Name is protobuf-style field name (snake_case)
	Name string
	// Accessor name when marshaling this field
	Accessor   string
	Type       descriptor.FieldDescriptorProto_Type
	IsRepeated bool
	IsMap      bool
}

func (f *protoField) IsTypeScalar() bool {
	return !f.IsTypeEnum() && !f.IsTypeMessage()
}

func (f *protoField) IsTypeEnum() bool {
	return f.Type == descriptor.FieldDescriptorProto_TYPE_ENUM
}

func (f *protoField) IsTypeMessage() bool {
	return f.Type == descriptor.FieldDescriptorProto_TYPE_MESSAGE
}

func (f *protoField) GoScalarType() string {
	switch f.Type {
	case descriptor.FieldDescriptorProto_TYPE_DOUBLE:
		return "Float64"
	case descriptor.FieldDescriptorProto_TYPE_FLOAT:
		return "Float32"
	case descriptor.FieldDescriptorProto_TYPE_INT32, descriptor.FieldDescriptorProto_TYPE_SINT32, descriptor.FieldDescriptorProto_TYPE_SFIXED32:
		return "Int32"
	case descriptor.FieldDescriptorProto_TYPE_UINT32, descriptor.FieldDescriptorProto_TYPE_FIXED32:
		return "Uint32"
	case descriptor.FieldDescriptorProto_TYPE_INT64, descriptor.FieldDescriptorProto_TYPE_SINT64, descriptor.FieldDescriptorProto_TYPE_SFIXED64:
		return "Int64"
	case descriptor.FieldDescriptorProto_TYPE_UINT64, descriptor.FieldDescriptorProto_TYPE_FIXED64:
		return "Uint64"
	case descriptor.FieldDescriptorProto_TYPE_BOOL:
		return "Bool"
	case descriptor.FieldDescriptorProto_TYPE_STRING:
		return "String"
	case descriptor.FieldDescriptorProto_TYPE_BYTES:
		return "ByteString"
	}
	panic(fmt.Sprintf("unknown scalar type %s", f.Type))
}

// TODO map

const tmpl = `// Code generated by protoc-gen-marshal-zap. DO NOT EDIT.
// source: {{ .Path }}

package {{ .GoPackage }}

import  (
	"go.uber.org/zap/zapcore"
)

{{ range .Messages }}
func (m *{{ .Name }}) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if m == nil {
		return nil
	}

{{ range .Fields }}
	{{ if .IsRepeated }}
		{{ .Name }}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
	        for _, v := range m.{{ .Accessor }}{
				{{ if .IsTypeScalar }}
	            	enc.Append{{ .GoScalarType }}(v)
				{{ else if .IsTypeEnum }}
	            	enc.AppendString(v.String())
				{{ else if and .IsTypeMessage (not .IsMap) }}
			    	if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
			    	    enc.AppendObject(obj)
			    	} else {
			    	    enc.AppendReflected(v)
			    	}
				{{ else }}	
			    	enc.AppendReflected(v)
				{{ end }}	
	        }
	        return nil
	    }
	    enc.AddArray("{{ .Name }}", zapcore.ArrayMarshalerFunc({{ .Name }}ArrMarshaller))

	{{ else }}	
		{{ if .IsTypeScalar }}
			enc.Add{{ .GoScalarType }}("{{ .Name }}", m.{{ .Accessor }})
		{{ else if .IsTypeEnum }}
			enc.AddString("{{ .Name }}", m.{{ .Accessor }}.String())
		{{ else if and .IsTypeMessage (not .IsMap) }}
			if obj, ok := interface{}(m.{{ .Accessor }}).(zapcore.ObjectMarshaler); ok {
				enc.AddObject("{{ .Name }}", obj)
			} else {
				enc.AddReflected("{{ .Name }}", m.{{ .Accessor }})
			}
		{{ else }}	
			enc.AddReflected("{{ .Name }}", m.{{ .Accessor }})
		{{ end }}	
	{{ end }}	
{{ end }}	

	return nil
}
{{ end }}
`
