// Code generated by protoc-gen-marshal-zap. DO NOT EDIT.
// source: github.com/kei2100/playground-protobuf/go/message/types.pb.go

package message

import (
	"go.uber.org/zap/zapcore"
	"strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = strconv.FormatInt

func (m *Types) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if m == nil {
		return nil
	}

	enc.AddFloat64("float64", m.Float64)

	enc.AddFloat32("float32", m.Float32)

	enc.AddInt32("int32", m.Int32)

	enc.AddInt64("int64", m.Int64)

	enc.AddUint32("uint32", m.Uint32)

	enc.AddUint64("uint64", m.Uint64)

	enc.AddInt32("sint32", m.Sint32)

	enc.AddInt64("sint64", m.Sint64)

	enc.AddUint32("fixed32", m.Fixed32)

	enc.AddUint64("fixed64", m.Fixed64)

	enc.AddInt32("sfixed32", m.Sfixed32)

	enc.AddInt64("sfixed64", m.Sfixed64)

	enc.AddBool("bool", m.Bool)

	enc.AddString("string", m.String_)

	enc.AddByteString("bytes", m.Bytes)

	enc.AddString("will_mask", m.WillMask)

	enc.AddString("enum", m.Enum.String())

	if obj, ok := interface{}(m.Nested).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("nested", obj)
	} else {
		enc.AddReflected("nested", m.Nested)
	}

	enc.AddString("oneof_string", m.GetOneofString())

	enc.AddInt32("oneof_int32", m.GetOneofInt32())

	string_listArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range m.StringList {

			enc.AppendString(v)

		}
		return nil
	}
	enc.AddArray("string_list", zapcore.ArrayMarshalerFunc(string_listArrMarshaller))

	enc.AddObject("string_string_map", zapcore.ObjectMarshalerFunc(func(enc zapcore.ObjectEncoder) error {
		for k, v := range m.StringStringMap {

			enc.AddString(k, v)

			return nil
		}
	}))

	enc.AddObject("int32_string_map", zapcore.ObjectMarshalerFunc(func(enc zapcore.ObjectEncoder) error {
		for k, v := range m.Int32StringMap {

			enc.AddString(strconv.FormatInt(int64(k), 10), v)

			return nil
		}
	}))

	enc.AddObject("int64_string_map", zapcore.ObjectMarshalerFunc(func(enc zapcore.ObjectEncoder) error {
		for k, v := range m.Int64StringMap {

			enc.AddString(strconv.FormatInt(k, 10), v)

			return nil
		}
	}))

	enc.AddObject("int64_int64_map", zapcore.ObjectMarshalerFunc(func(enc zapcore.ObjectEncoder) error {
		for k, v := range m.Int64Int64Map {

			enc.AddInt64(strconv.FormatInt(k, 10), v)

			return nil
		}
	}))

	enc.AddObject("string_message_map", zapcore.ObjectMarshalerFunc(func(enc zapcore.ObjectEncoder) error {
		for k, v := range m.StringMessageMap {

			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AddObject(strconv.FormatInt(k, 10), obj)
			} else {
				enc.AddReflected(strconv.FormatInt(k, 10), v)
			}

			return nil
		}
	}))

	if obj, ok := interface{}(m.Any).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("any", obj)
	} else {
		enc.AddReflected("any", m.Any)
	}

	return nil
}

func (m *Types_Nested) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if m == nil {
		return nil
	}

	enc.AddString("nested_string", m.NestedString)

	return nil
}
